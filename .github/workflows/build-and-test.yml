name: Build and Test

on:
  push:
    branches:
      - main

jobs:
  #  build-and-lint:
  #    name: Build app and run linters
  #    runs-on: ubuntu-latest
  #    timeout-minutes: 20
  #    steps:
  #      - name: Checkout
  #        uses: actions/checkout@v3
  #
  #      - name: Set up our JDK environment
  #        uses: actions/setup-java@v3
  #        with:
  #          distribution: 'adopt'
  #          java-version: '19'
  #
  #      - name: Decode Keystore & Setup local.properties
  #        env:
  #          ENCODED_STRING: ${{ secrets.KEYSTORE }}
  #        run: |
  #          TMP_KEYSTORE_FILE_PATH="${RUNNER_TEMP}"/keystore
  #          mkdir "${TMP_KEYSTORE_FILE_PATH}"
  #          echo $ENCODED_STRING | base64 -di > "${TMP_KEYSTORE_FILE_PATH}"/app.jks
  #          echo "RELEASE_STORE_FILE=${TMP_KEYSTORE_FILE_PATH}/app.jks" >> local.properties
  #          echo "RELEASE_STORE_PASSWORD=${{ secrets.SIGNING_STORE_PASSWORD }}" >> local.properties
  #          echo "RELEASE_KEY_ALIAS=${{ secrets.SIGNING_KEY_ALIAS }}" >> local.properties
  #          echo "RELEASE_KEY_PASSWORD=${{ secrets.SIGNING_KEY_PASSWORD }}" >> local.properties
  #
  #      - name: Clean project
  #        run: ./gradlew clean

  #      - name: Run detekt Linter
  #        run: ./gradlew detekt
  #
  #      - name: Run Kotlin Linter
  #        run: ./gradlew ktlintCheck
  #
  #      - name: Run Android Linter
  #        run: ./gradlew lint
  #
  #      - name: Run Spotless
  #        run: ./gradlew spotlessCheck

  #  unit-tests:
  #    name: Run unit tests
  #    runs-on: ubuntu-latest
  #    needs: build-and-lint
  #    steps:
  #      - name: Checkout
  #        uses: actions/checkout@v3
  #
  #      - name: Set up our JDK environment
  #        uses: actions/setup-java@v3
  #        with:
  #          distribution: 'adopt'
  #          java-version: '19'
  #
  #      - name: Decode Keystore & Setup local.properties
  #        env:
  #          ENCODED_STRING: ${{ secrets.KEYSTORE }}
  #        run: |
  #          TMP_KEYSTORE_FILE_PATH="${RUNNER_TEMP}"/keystore
  #          mkdir "${TMP_KEYSTORE_FILE_PATH}"
  #          echo $ENCODED_STRING | base64 -di > "${TMP_KEYSTORE_FILE_PATH}"/app.jks
  #          echo "RELEASE_STORE_FILE=${TMP_KEYSTORE_FILE_PATH}/app.jks" >> local.properties
  #          echo "RELEASE_STORE_PASSWORD=${{ secrets.SIGNING_STORE_PASSWORD }}" >> local.properties
  #          echo "RELEASE_KEY_ALIAS=${{ secrets.SIGNING_KEY_ALIAS }}" >> local.properties
  #          echo "RELEASE_KEY_PASSWORD=${{ secrets.SIGNING_KEY_PASSWORD }}" >> local.properties
  #
  #      - name: Run Unit Tests
  #        run: ./gradlew clean test

  instrumented-tests:
    name: Run Android Instrumented Tests
    #    needs: unit-tests
    runs-on: macos-latest
    strategy:
      matrix:
        api-level: [ 21, 25, 29 ]
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Set up our JDK environment
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '19'

      - name: Decode Keystore & Setup local.properties
        env:
          ENCODED_STRING: ${{ secrets.KEYSTORE }}
        run: |
          TMP_KEYSTORE_FILE_PATH="${RUNNER_TEMP}"/keystore
          mkdir "${TMP_KEYSTORE_FILE_PATH}"
          echo $ENCODED_STRING | base64 -d > "${TMP_KEYSTORE_FILE_PATH}"/app.jks
          echo "RELEASE_STORE_FILE=${TMP_KEYSTORE_FILE_PATH}/app.jks" >> local.properties
          echo "RELEASE_STORE_PASSWORD=${{ secrets.SIGNING_STORE_PASSWORD }}" >> local.properties
          echo "RELEASE_KEY_ALIAS=${{ secrets.SIGNING_KEY_ALIAS }}" >> local.properties
          echo "RELEASE_KEY_PASSWORD=${{ secrets.SIGNING_KEY_PASSWORD }}" >> local.properties

      - name: Gradle cache
        uses: gradle/gradle-build-action@v2

      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            for i in 1 2 3; do
              if ./gradlew connectedCheck; then
                echo "Tests passed on attempt $i"
                break
              elif [ $i -lt 3 ]; then
                echo "Tests failed on attempt $i. Retrying..."
              else
                echo "Tests failed on attempt $i. Not retrying."
                exit 1
              fi
            done

      - name: Zip test results
        run: zip -r test-results.zip app/build/reports/androidTests/connected

      - name: Upload test results if  run failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-results.zip
          path: test-results.zip
